var strPluginName = "Symbol Instance Locator",
	debugMode = false;

var uiButtons = [];

var instancePanelWidth = 500,
	instancePanelHeight = 492 + 38 + 30, // 38 is for the button panel, 30 is for segmented control
	instancePanelTitle = 44,
	gutterWidth = 15;

var locate = function(context) {
	var selection = context.selection;

	if (selection.count() == 1 && (selection[0] instanceof MSSymbolMaster || selection[0] instanceof MSSymbolInstance)) {
		var symbol = selection[0],
			symbolMaster = (symbol instanceof MSSymbolMaster) ? symbol : symbol.symbolMaster(),
			symbolInstances = getSymbolInstances(context,symbolMaster),
			symbolOverrides = getSymbolOverrides(context,symbolMaster),
			instances = symbolInstances;

		if (symbolInstances.length == 0 && symbolOverrides.length == 0) {
			displayDialog(symbolMaster.name() + " has no instances or overrides.",strPluginName);
		} else {
			var instancePanel = NSPanel.alloc().init();
			instancePanel.setFrame_display(NSMakeRect(0,0,instancePanelWidth,instancePanelHeight),true);
			instancePanel.setStyleMask(NSTexturedBackgroundWindowMask | NSTitledWindowMask | NSClosableWindowMask | NSFullSizeContentViewWindowMask);
			instancePanel.setBackgroundColor(NSColor.controlColor());
			instancePanel.setLevel(NSFloatingWindowLevel);
			instancePanel.standardWindowButton(NSWindowMiniaturizeButton).setHidden(true);
			instancePanel.standardWindowButton(NSWindowZoomButton).setHidden(true);
			instancePanel.makeKeyAndOrderFront(null);
			instancePanel.center();
			instancePanel.title = strPluginName;

			COScript.currentCOScript().setShouldKeepAround_(true);

			var threadDictionary = NSThread.mainThread().threadDictionary(),
				identifier = "com.sonburn.sketchplugins.symbol-instance-locator";

			if (threadDictionary[identifier]) return;

			threadDictionary[identifier] = instancePanel;

			var closeButton = instancePanel.standardWindowButton(NSWindowCloseButton);

			closeButton.setCOSJSTargetFunction(function(sender) {
				instancePanel.close();
				threadDictionary.removeObjectForKey(identifier);
				COScript.currentCOScript().setShouldKeepAround_(false);
			});

			var instancePanelContent = NSView.alloc().initWithFrame(NSMakeRect(0,0,instancePanelWidth,instancePanelHeight-instancePanelTitle));

			instancePanelContent.setFlipped(1);

			var matchType = createSegmentedControl(["Instances (" + symbolInstances.length + ")","Overrides (" + symbolOverrides.length + ")"],NSMakeRect(52,34,300,24));

			instancePanelContent.addSubview(matchType);

			var matchText = createBoldDescription(String(symbolMaster.name()),12,NSMakeRect(8,12,instancePanelWidth-16,16));

			instancePanelContent.addSubview(matchText);

			var selectText = createDescription("Select an instance below to navigate to it's location...",12,NSMakeRect(8,64,instancePanelWidth-16,16));

			instancePanelContent.addSubview(selectText);

			var selectAllButton = NSButton.alloc().initWithFrame(NSMakeRect(0,480,130,36));

			selectAllButton.setTitle("Select All on Page");
			selectAllButton.setBezelStyle(NSRoundedBezelStyle);
			selectAllButton.setAction("callAction:");
			selectAllButton.setCOSJSTargetFunction(function(sender) {
				var scrolled = false;

				deselectButtons(uiButtons);

				context.document.currentPage().changeSelectionBySelectingLayers(nil);

				var symbolType = (matchType.indexOfSelectedItem() == 0) ? symbolInstances : symbolOverrides,
					predicate = NSPredicate.predicateWithFormat("parentPage == %@",context.document.currentPage()),
					pageInstances = symbolType.filteredArrayUsingPredicate(predicate),
					pageInstanceLoop = pageInstances.objectEnumerator(),
					pageInstance;

				while (pageInstance = pageInstanceLoop.nextObject()) {
					pageInstance.select_byExpandingSelection(true,true);

					var buttonToSelect = symbolType.indexOfObject(pageInstance);

					uiButtons[buttonToSelect].setWantsLayer(1);
					uiButtons[buttonToSelect].layer().setBorderWidth(2);
					uiButtons[buttonToSelect].layer().setBorderColor(CGColorCreateGenericRGB(0,0,1,1));

					if (scrolled == false) {
						instanceFrame.subviews().firstObject().scrollPoint(NSMakePoint(0,96*buttonToSelect));
						scrolled = true;
					}
				}
			});

			instancePanelContent.addSubview(selectAllButton);

			var selectMasterButton = NSButton.alloc().initWithFrame(NSMakeRect(130,480,100,36));

			selectMasterButton.setTitle("Go to Master");
			selectMasterButton.setBezelStyle(NSRoundedBezelStyle);
			selectMasterButton.setEnabled(context.document.pages().containsObject(symbolMaster.parentPage()));
			selectMasterButton.setAction("callAction:");
			selectMasterButton.setCOSJSTargetFunction(function(sender) {
				deselectButtons(uiButtons);

				context.document.currentPage().changeSelectionBySelectingLayers(nil);

				var rect = symbolMaster.absoluteRect().rect();

				MSDocument.currentDocument().setCurrentPage(symbolMaster.parentPage());
				MSDocument.currentDocument().contentDrawView().zoomToFitRect(rect);

				symbolMaster.select_byExpandingSelection(true,false);
			});

			instancePanelContent.addSubview(selectMasterButton);

			// var refreshButton = NSButton.alloc().initWithFrame(NSMakeRect(230,450,120,36));
			// refreshButton.setTitle("Refresh Results");
			// refreshButton.setBezelStyle(NSRoundedBezelStyle);
			// refreshButton.setEnabled(0);
			// instancePanelContent.addSubview(refreshButton);

			var instanceFrame = NSScrollView.alloc().initWithFrame(NSMakeRect(0,94,instancePanelWidth,384));

			instanceFrame.setHasVerticalScroller(true);

			instancePanelContent.addSubview(instanceFrame);

			if (!symbolOverrides.length) {
				matchType.setEnabled_forSegment(0,1);
				matchType.setSelected_forSegment(1,0);
			} else if (!symbolInstances.length) {
				matchType.setEnabled_forSegment(0,0);
				matchType.setSelected_forSegment(1,1);

				instances = symbolOverrides;
			} else {
				matchType.cell().setAction("callAction:");
				matchType.cell().setCOSJSTargetFunction(function(sender) {
					instances = (sender.indexOfSelectedItem() == 0) ? symbolInstances : symbolOverrides;

					displayInstances(instanceFrame,instances);
				});
			}

			displayInstances(instanceFrame,instances);

			instancePanel.contentView().addSubview(instancePanelContent);

			if (!debugMode) googleAnalytics(context,"locate","run");
		}
	} else {
		displayDialog("Select one symbol master or instance.",strPluginName);
	}
}

var report = function(context) {
	openUrl("https://github.com/sonburn/symbol-instance-locator/issues/new");

	if (!debugMode) googleAnalytics(context,"report","report");
}

var plugins = function(context) {
	openUrl("https://sonburn.github.io/");

	if (!debugMode) googleAnalytics(context,"plugins","plugins");
}

var donate = function(context) {
	openUrl("https://www.paypal.me/sonburn");

	if (!debugMode) googleAnalytics(context,"donate","donate");
}

function createBoldDescription(text,size,frame,alpha) {
	var label = NSTextField.alloc().initWithFrame(frame),
		alpha = (alpha) ? alpha : 1.0;

	label.setStringValue(text);
	label.setFont(NSFont.boldSystemFontOfSize(size));
	label.setTextColor(NSColor.colorWithCalibratedRed_green_blue_alpha(0/255,0/255,0/255,alpha));
	label.setBezeled(false);
	label.setDrawsBackground(false);
	label.setEditable(false);
	label.setSelectable(false);

	return label;
}

function createDescription(text,size,frame,alpha) {
	var label = NSTextField.alloc().initWithFrame(frame),
		alpha = (alpha) ? alpha : 1.0;

	label.setStringValue(text);
	label.setFont(NSFont.systemFontOfSize(size));
	label.setTextColor(NSColor.colorWithCalibratedRed_green_blue_alpha(0/255,0/255,0/255,alpha));
	label.setBezeled(false);
	label.setDrawsBackground(false);
	label.setEditable(false);
	label.setSelectable(false);

	return label;
}

function createDivider(frame) {
	var divider = NSView.alloc().initWithFrame(frame);

	divider.setWantsLayer(1);
	divider.layer().setBackgroundColor(CGColorCreateGenericRGB(204/255,204/255,204/255,1.0));

	return divider;
}

function createImageArea(instance,frame) {
	var imageArea = NSButton.alloc().initWithFrame(frame);

	imageArea.setTitle("");
	imageArea.setBordered(0);
	imageArea.setWantsLayer(1);
	imageArea.layer().setBackgroundColor(CGColorCreateGenericRGB(248/255,248/255,248/255,1.0));

	var exportRequest = MSExportRequest.exportRequestsFromExportableLayer_inRect_useIDForName_(
		instance,
		instance.absoluteInfluenceRect(),
		false
		).firstObject();

	exportRequest.format = "png";

	var scaleX = (frame.size.width-4*2) / exportRequest.rect().size.width;
	var scaleY = (frame.size.height-4*2) / exportRequest.rect().size.height;

	exportRequest.scale = (scaleX < scaleY) ? scaleX : scaleY;

	var colorSpace = NSColorSpace.sRGBColorSpace(),
		exporter = MSExporter.exporterForRequest_colorSpace_(exportRequest,colorSpace),
		imageRep = exporter.bitmapImageRep(),
		instanceImage = NSImage.alloc().init().autorelease();

	instanceImage.addRepresentation(imageRep);

	imageArea.setImage(instanceImage);

	return imageArea;
}

function createListItem(instance,frame) {
	var listItem = NSView.alloc().initWithFrame(frame),
		rightColWidth = 140,
		leftColWidth = frame.size.width-rightColWidth,
		leftPad = 8;

	listItem.setFlipped(1);
	listItem.addSubview(createTextLabel("Page",NSMakeRect(leftPad,6,leftColWidth,14)));
	listItem.addSubview(createTextField(instance.parentPage().name(),NSMakeRect(leftPad,18,leftColWidth-leftPad,18)));
	listItem.addSubview(createTextLabel("Artboard",NSMakeRect(leftPad,34,leftColWidth,14)));
	listItem.addSubview(createTextField((instance.parentArtboard()) ? instance.parentArtboard().name() : "None",NSMakeRect(leftPad,46,leftColWidth-leftPad,18)));
	listItem.addSubview(createTextLabel("Instance",NSMakeRect(leftPad,62,leftColWidth,14)));
	listItem.addSubview(createTextField(instance.name(),NSMakeRect(leftPad,74,leftColWidth-leftPad,18)));
	listItem.addSubview(createImageArea(instance,NSMakeRect(leftColWidth,0,rightColWidth,frame.size.height)));
	listItem.addSubview(createDivider(NSMakeRect(0,frame.size.height-1,frame.size.width,1)));
	listItem.addSubview(createTargetArea(instance,NSMakeRect(0,0,frame.size.width,frame.size.height)));

	return listItem;
}

function createSegmentedControl(items,frame) {
	var segControl = NSSegmentedControl.alloc().initWithFrame(frame);

	segControl.setSegmentCount(items.length);

	items.forEach(function(item,index) {
		segControl.setLabel_forSegment(item,index);
		segControl.setWidth_forSegment(120,index);
	});

	segControl.cell().setTrackingMode(0); //Raw value of NSSegmentSwitchTrackingSelectOne.
	segControl.setSelected_forSegment(1,0);

	return segControl;
}

function createTargetArea(instance,frame) {
	var targetArea = NSButton.alloc().initWithFrame(frame);

	uiButtons.push(targetArea);

	targetArea.addCursorRect_cursor(targetArea.frame(),NSCursor.pointingHandCursor());
	targetArea.setTransparent(1);
	targetArea.setAction("callAction:");
	targetArea.setCOSJSTargetFunction(function(sender) {
		deselectButtons(uiButtons);

		sender.setWantsLayer(1);
		sender.layer().setBorderWidth(2);
		sender.layer().setBorderColor(CGColorCreateGenericRGB(0,0,1,1));

		var rect = (instance.parentArtboard()) ? instance.parentArtboard().rect() : instance.absoluteRect().rect();

		MSDocument.currentDocument().setCurrentPage(instance.parentPage());
		MSDocument.currentDocument().contentDrawView().zoomToFitRect(rect);

		instance.select_byExpandingSelection(true,false);
	});

	return targetArea;
}

function createTextField(string,frame) {
	var textField = NSTextField.alloc().initWithFrame(frame);

	textField.setStringValue(string);
	textField.setFont(NSFont.systemFontOfSize(11));
	textField.setBezeled(0);
	textField.setEditable(0);
	textField.setLineBreakMode(NSLineBreakByTruncatingTail);

	return textField;
}

function createTextLabel(string,frame) {
	var textLabel = NSTextField.alloc().initWithFrame(frame);

	textLabel.setStringValue(string);
	textLabel.setFont(NSFont.systemFontOfSize(9));
	textLabel.setTextColor(NSColor.colorWithCalibratedRed_green_blue_alpha(0/255,0/255,0/255,0.4));
	textLabel.setBezeled(0);
	textLabel.setEditable(0);

	return textLabel;
}

function deselectButtons(buttons) {
	for (var i = 0; i < buttons.length; i++) {
		if (buttons[i].layer()) {
			buttons[i].layer().setBorderWidth(0);
			buttons[i].setWantsLayer(0);
		}
	}
}

function displayDialog(message,title) {
	NSApplication.sharedApplication().displayDialog_withTitle(message,title);
}

function displayInstances(parent,instances) {
	uiButtons = [];

	var instanceHeight = 96,
		instanceWidth = instancePanelWidth - gutterWidth,
		instanceContent = NSView.alloc().initWithFrame(NSMakeRect(0,0,instanceWidth,instanceHeight*instances.length)),
		count = 0;

	instanceContent.setFlipped(true);

	for (var i = 0; i < instances.length; i++) {
		var instance = createListItem(instances[i],NSMakeRect(0,instanceHeight*count,instanceWidth,instanceHeight));

		instanceContent.addSubview(instance);

		count++;
	}

	parent.setDocumentView(instanceContent);
}

function getSymbolInstances(context,symbolMaster) {
	var symbolInstances = NSMutableArray.array();

	var pages = context.document.pages(),
		pageLoop = pages.objectEnumerator(),
		page;

	while (page = pageLoop.nextObject()) {
		var predicate = NSPredicate.predicateWithFormat("className == 'MSSymbolInstance' && symbolMaster == %@",symbolMaster),
			instances = page.children().filteredArrayUsingPredicate(predicate),
			instanceLoop = instances.objectEnumerator(),
			instance;

		while (instance = instanceLoop.nextObject()) {
			symbolInstances.addObject(instance);
		}
	}

	return symbolInstances;
}

function getSymbolOverrides(context,symbolMaster) {
	var symbolOverrides = NSMutableArray.array();

	var pages = context.document.pages(),
		pageLoop = pages.objectEnumerator(),
		page;

	while (page = pageLoop.nextObject()) {
		var predicate = NSPredicate.predicateWithFormat("className == %@ && overrideValues != nil","MSSymbolInstance"),
			instances = page.children().filteredArrayUsingPredicate(predicate),
			instanceLoop = instances.objectEnumerator(),
			instance;

		while (instance = instanceLoop.nextObject()) {
			if (instance.overrides()) {
				var overrides = instance.availableOverrides(),
					symbolMasterID = String(symbolMaster.symbolID());

				if (overrides) {
					overrides.forEach(function(override) {
						if (override.hasOverride()) {
							if (String(override.overrideValue()) == symbolMasterID) {
								if (!symbolOverrides.containsObject(instance)) {
									symbolOverrides.addObject(instance);
								}
							} else {
								if (override.children()) {
									override.children().forEach(function(child) {
										if (child.className() == "MSSymbolOverride" && String(child.overrideValue()) == symbolMasterID) {
											if (!symbolOverrides.containsObject(instance)) {
												symbolOverrides.addObject(instance);
											}
										}
									});
								}
							}
						}
					});
				}
			}
		}
	}

	return symbolOverrides;
}

function googleAnalytics(context,category,action,label,value) {
	var trackingID = "UA-118987499-1",
		uuidKey = "google.analytics.uuid",
		uuid = NSUserDefaults.standardUserDefaults().objectForKey(uuidKey);

	if (!uuid) {
		uuid = NSUUID.UUID().UUIDString();
		NSUserDefaults.standardUserDefaults().setObject_forKey(uuid,uuidKey);
	}

	var url = "https://www.google-analytics.com/collect?v=1";
	// Tracking ID
	url += "&tid=" + trackingID;
	// Source
	url += "&ds=sketch" + MSApplicationMetadata.metadata().appVersion;
	// Client ID
	url += "&cid=" + uuid;
	// pageview, screenview, event, transaction, item, social, exception, timing
	url += "&t=event";
	// App Name
	url += "&an=" + encodeURI(context.plugin.name());
	// App ID
	url += "&aid=" + context.plugin.identifier();
	// App Version
	url += "&av=" + context.plugin.version();
	// Event category
	url += "&ec=" + encodeURI(category);
	// Event action
	url += "&ea=" + encodeURI(action);
	// Event label
	if (label) {
		url += "&el=" + encodeURI(label);
	}
	// Event value
	if (value) {
		url += "&ev=" + encodeURI(value);
	}

	var session = NSURLSession.sharedSession(),
		task = session.dataTaskWithURL(NSURL.URLWithString(NSString.stringWithString(url)));

	task.resume();
}

function openUrl(url) {
	NSWorkspace.sharedWorkspace().openURL(NSURL.URLWithString(url));
}
